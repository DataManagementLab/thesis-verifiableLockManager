syntax = "proto3";

message LockRequest {
    // Identifies the transaction, that requests the lock
    uint32 transaction_id = 1;
    // Identifies the rows that the transaction wants to access
    uint32 row_id = 2;
    bool wait_for_signature = 3;
}

message LockResponse {
    // If the lock got acquired, the signature of (TXID, RID, block timeout) is used to proof that.
    // Contains the signature, if the lock got released after a call to Unlock
    // or if the lock was acquired for the requesting transaction.
    // Reasons the lock cannot be acquired are:
    //  - the transaction did not register itself to the lock manager prior to requesting a lock
    //  - the deadlock prevention mechanism detected that this lock request would cause a deadlock
    //  - the transaction requests a lock after it already entered the shrinking phase, violating 2PL
    string signature = 1;
}

message RegistrationRequest {
    // Identifies the transaction, that wants to register
    uint32 transaction_id = 1;
}

message RegistrationResponse {
    // Only uses the Status of the response to convey the information, Status::OK or Status::CANCELLED.
}

service LockingService {
    // Sets maximum number of locks the transaction aims to acquire prior to requesting locks
    rpc RegisterTransaction(RegistrationRequest) returns (RegistrationResponse) {};
    // Requests a shared lock for reading a row
    rpc LockShared(LockRequest) returns (LockResponse) {};
    // Requests an exclusive lock for writing a row
    // When holding a shared lock it will attempt to upgrade it to an exclusive lock
    rpc LockExclusive(LockRequest) returns (LockResponse) {};
    // Unlocks the specified lock
    rpc Unlock(LockRequest) returns (LockResponse) {};
}